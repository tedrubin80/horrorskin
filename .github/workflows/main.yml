name: 🎭 Horror Wiki File Organizer & Integration
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_reorganize:
        description: 'Force complete reorganization'
        required: false
        default: 'false'
        type: boolean
      create_release:
        description: 'Create release package'
        required: false
        default: 'true'
        type: boolean

jobs:
  organize-horror-wiki:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better file detection
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML pathlib2 jinja2
        
    - name: 🎭 Create Horror Wiki Directory Structure
      run: |
        echo "🏗️ Creating Horror Wiki unified extension structure..."
        
        # Create main unified extension directory
        mkdir -p extensions/HorrorWiki/{includes/{specials},resources,sql,i18n,docs,templates}
        
        # Create backup directory for original files
        mkdir -p .github/backups/{original-files,migration-logs}
        
        # Create output directories
        mkdir -p .github/outputs/{organized,deployment,reports}
        
        echo "✅ Directory structure created successfully!"
        
    - name: 🔍 Analyze Repository Structure
      id: analyze
      run: |
        echo "🔍 Analyzing repository structure and detecting files..."
        
        # Create analysis script
        cat > analyze_repo.py << 'EOF'
        import os
        import json
        import re
        from pathlib import Path
        
        def analyze_repository():
            analysis = {
                "skin_files": [],
                "extension_files": [],
                "css_files": [],
                "js_files": [],
                "php_files": [],
                "sql_files": [],
                "doc_files": [],
                "other_files": [],
                "total_files": 0
            }
            
            # File patterns for identification
            patterns = {
                "skin": [
                    r"skin.*\.php$", r".*template.*\.php$", r".*skin.*\.json$",
                    r"skin/.*", r"skins/.*"
                ],
                "extension": [
                    r"horror.*wiki.*\.php$", r"special.*horror.*\.php$",
                    r".*hooks.*\.php$", r"extension\.json$"
                ],
                "css": [r".*\.css$", r".*\.less$", r".*\.scss$"],
                "js": [r".*\.js$", r".*\.ts$"],
                "php": [r".*\.php$"],
                "sql": [r".*\.sql$", r".*\.mysql$"],
                "docs": [r".*\.md$", r".*\.txt$", r"readme.*", r"install.*", r".*guide.*"]
            }
            
            def matches_pattern(filename, pattern_list):
                filename_lower = filename.lower()
                return any(re.search(pattern, filename_lower) for pattern in pattern_list)
            
            # Scan repository
            for root, dirs, files in os.walk("."):
                # Skip hidden and build directories
                dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', 'vendor']]
                
                for file in files:
                    if file.startswith('.'):
                        continue
                        
                    filepath = os.path.join(root, file)
                    analysis["total_files"] += 1
                    
                    file_info = {
                        "name": file,
                        "path": filepath,
                        "size": os.path.getsize(filepath) if os.path.exists(filepath) else 0,
                        "type": "unknown"
                    }
                    
                    # Categorize files
                    if matches_pattern(file, patterns["skin"]):
                        file_info["type"] = "skin"
                        analysis["skin_files"].append(file_info)
                    elif matches_pattern(file, patterns["extension"]):
                        file_info["type"] = "extension"
                        analysis["extension_files"].append(file_info)
                    elif matches_pattern(file, patterns["css"]):
                        file_info["type"] = "css"
                        analysis["css_files"].append(file_info)
                    elif matches_pattern(file, patterns["js"]):
                        file_info["type"] = "js"
                        analysis["js_files"].append(file_info)
                    elif matches_pattern(file, patterns["php"]):
                        file_info["type"] = "php"
                        analysis["php_files"].append(file_info)
                    elif matches_pattern(file, patterns["sql"]):
                        file_info["type"] = "sql"
                        analysis["sql_files"].append(file_info)
                    elif matches_pattern(file, patterns["docs"]):
                        file_info["type"] = "docs"
                        analysis["doc_files"].append(file_info)
                    else:
                        analysis["other_files"].append(file_info)
            
            return analysis
        
        # Run analysis
        result = analyze_repository()
        
        # Save analysis
        with open('.github/outputs/reports/repository_analysis.json', 'w') as f:
            json.dump(result, f, indent=2)
        
        # Output summary
        print(f"📊 Repository Analysis Complete:")
        print(f"   Total Files: {result['total_files']}")
        print(f"   Skin Files: {len(result['skin_files'])}")
        print(f"   Extension Files: {len(result['extension_files'])}")
        print(f"   CSS Files: {len(result['css_files'])}")
        print(f"   JavaScript Files: {len(result['js_files'])}")
        print(f"   PHP Files: {len(result['php_files'])}")
        print(f"   SQL Files: {len(result['sql_files'])}")
        print(f"   Documentation: {len(result['doc_files'])}")
        print(f"   Other Files: {len(result['other_files'])}")
        
        # Set output for next step
        import os
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"total_files={result['total_files']}\n")
            f.write(f"skin_files={len(result['skin_files'])}\n")
            f.write(f"extension_files={len(result['extension_files'])}\n")
        EOF
        
        python analyze_repo.py
        
    - name: 🗂️ Smart File Organization
      run: |
        echo "🗂️ Starting intelligent file organization..."
        
        # Create advanced organization script
        cat > organize_files.py << 'EOF'
        import os
        import json
        import shutil
        import re
        from pathlib import Path
        
        def load_analysis():
            with open('.github/outputs/reports/repository_analysis.json', 'r') as f:
                return json.load(f)
        
        def organize_file(source_path, target_path, file_info):
            """Safely move and organize a file"""
            try:
                # Create target directory if it doesn't exist
                os.makedirs(os.path.dirname(target_path), exist_ok=True)
                
                # Backup original file
                backup_path = f".github/backups/original-files/{os.path.basename(source_path)}"
                os.makedirs(os.path.dirname(backup_path), exist_ok=True)
                if os.path.exists(source_path):
                    shutil.copy2(source_path, backup_path)
                
                # Copy to new location
                if os.path.exists(source_path):
                    shutil.copy2(source_path, target_path)
                    print(f"✅ Organized: {source_path} → {target_path}")
                    return True
                else:
                    print(f"⚠️  Source not found: {source_path}")
                    return False
                    
            except Exception as e:
                print(f"❌ Error organizing {source_path}: {e}")
                return False
        
        def smart_organize():
            analysis = load_analysis()
            organized_count = 0
            organization_log = []
            
            # File mapping rules
            file_mappings = {
                # Main extension files
                "horror_wiki_main": "extensions/HorrorWiki/HorrorWiki.php",
                "extension.json": "extensions/HorrorWiki/extension.json",
                "horrorwiki.php": "extensions/HorrorWiki/HorrorWiki.php",
                
                # Skin files
                "skinhorror": "extensions/HorrorWiki/includes/SkinHorror.php",
                "horrortemplate": "extensions/HorrorWiki/includes/HorrorTemplate.php",
                "skin.json": "extensions/HorrorWiki/skin.json",
                
                # Hook files
                "horror_wiki_hooks": "extensions/HorrorWiki/includes/HorrorWikiHooks.php",
                "horrorwikihooks": "extensions/HorrorWiki/includes/HorrorWikiHooks.php",
                
                # Special pages
                "special_horror_dashboard": "extensions/HorrorWiki/includes/specials/SpecialHorrorDashboard.php",
                "special_content_warnings": "extensions/HorrorWiki/includes/specials/SpecialContentWarnings.php",
                "special_horror_ratings": "extensions/HorrorWiki/includes/specials/SpecialHorrorRatings.php",
                
                # CSS files
                "horror_theme_css": "extensions/HorrorWiki/resources/horror-skin.css",
                "horror.css": "extensions/HorrorWiki/resources/horror-skin.css",
                "horror-theme.css": "extensions/HorrorWiki/resources/horror-skin.css",
                "content-warnings.css": "extensions/HorrorWiki/resources/content-warnings.css",
                "ratings.css": "extensions/HorrorWiki/resources/horror-ratings.css",
                
                # JavaScript files
                "horror_javascript": "extensions/HorrorWiki/resources/horror-navigation.js",
                "horror.js": "extensions/HorrorWiki/resources/horror-navigation.js",
                "horror-features.js": "extensions/HorrorWiki/resources/horror-features.js",
                "content-warnings.js": "extensions/HorrorWiki/resources/content-warnings.js",
                "navigation.js": "extensions/HorrorWiki/resources/navigation.js",
                
                # SQL files
                "horror_database_sql": "extensions/HorrorWiki/sql/horror_wiki_database.sql",
                "horror_wiki_database": "extensions/HorrorWiki/sql/horror_wiki_database.sql",
                "horror_ratings.sql": "extensions/HorrorWiki/sql/horror_ratings.sql",
                "content_warnings.sql": "extensions/HorrorWiki/sql/content_warnings.sql",
                
                # Documentation
                "installation_guide": "extensions/HorrorWiki/docs/INSTALLATION.md",
                "readme": "extensions/HorrorWiki/docs/README.md",
                "seo_optimization": "extensions/HorrorWiki/docs/SEO_SETUP.md",
                "file_organization_guide": "extensions/HorrorWiki/docs/FILE_ORGANIZATION.md",
                
                # i18n files
                "en.json": "extensions/HorrorWiki/i18n/en.json",
            }
            
            # Smart pattern matching
            def find_best_match(filename, file_path):
                filename_lower = filename.lower().replace('.', '').replace('_', '').replace('-', '')
                
                for pattern, target in file_mappings.items():
                    pattern_clean = pattern.lower().replace('.', '').replace('_', '').replace('-', '')
                    if pattern_clean in filename_lower or filename_lower in pattern_clean:
                        return target
                
                # Content-based detection
                if filename.endswith('.php'):
                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read().lower()
                            
                        if 'class skinhorror' in content:
                            return "extensions/HorrorWiki/includes/SkinHorror.php"
                        elif 'class horrortemplate' in content:
                            return "extensions/HorrorWiki/includes/HorrorTemplate.php"
                        elif 'class horrorwikihooks' in content:
                            return "extensions/HorrorWiki/includes/HorrorWikiHooks.php"
                        elif 'class specialhorrordashboard' in content:
                            return "extensions/HorrorWiki/includes/specials/SpecialHorrorDashboard.php"
                        elif 'class specialcontentwarnings' in content:
                            return "extensions/HorrorWiki/includes/specials/SpecialContentWarnings.php"
                        elif 'class specialhorrorratings' in content:
                            return "extensions/HorrorWiki/includes/specials/SpecialHorrorRatings.php"
                        elif 'wfloadextension' in content and 'horrorwiki' in content:
                            return "extensions/HorrorWiki/HorrorWiki.php"
                    except:
                        pass
                
                elif filename.endswith('.css'):
                    if 'horror-wiki-theme' in file_path.lower() or 'horror-theme' in file_path.lower():
                        return "extensions/HorrorWiki/resources/horror-skin.css"
                    elif 'warning' in file_path.lower():
                        return "extensions/HorrorWiki/resources/content-warnings.css"
                    elif 'rating' in file_path.lower():
                        return "extensions/HorrorWiki/resources/horror-ratings.css"
                
                elif filename.endswith('.js'):
                    if 'navigation' in file_path.lower() or 'horror.js' in file_path.lower():
                        return "extensions/HorrorWiki/resources/horror-navigation.js"
                    elif 'feature' in file_path.lower():
                        return "extensions/HorrorWiki/resources/horror-features.js"
                    elif 'warning' in file_path.lower():
                        return "extensions/HorrorWiki/resources/content-warnings.js"
                
                elif filename.endswith('.sql'):
                    if 'database' in file_path.lower() or 'complete' in file_path.lower():
                        return "extensions/HorrorWiki/sql/horror_wiki_database.sql"
                    elif 'rating' in file_path.lower():
                        return "extensions/HorrorWiki/sql/horror_ratings.sql"
                    elif 'warning' in file_path.lower():
                        return "extensions/HorrorWiki/sql/content_warnings.sql"
                
                return None
            
            # Process all files
            all_files = (analysis['skin_files'] + analysis['extension_files'] + 
                        analysis['css_files'] + analysis['js_files'] + 
                        analysis['php_files'] + analysis['sql_files'] + 
                        analysis['doc_files'])
            
            for file_info in all_files:
                source_path = file_info['path']
                filename = file_info['name']
                
                target_path = find_best_match(filename, source_path)
                
                if target_path:
                    success = organize_file(source_path, target_path, file_info)
                    if success:
                        organized_count += 1
                        organization_log.append({
                            "source": source_path,
                            "target": target_path,
                            "type": file_info['type'],
                            "size": file_info['size']
                        })
                else:
                    print(f"⚠️  No mapping found for: {source_path}")
            
            # Save organization log
            with open('.github/outputs/reports/organization_log.json', 'w') as f:
                json.dump(organization_log, f, indent=2)
            
            print(f"\n🎉 Organization Complete!")
            print(f"   Files Organized: {organized_count}")
            print(f"   Total Files Processed: {len(all_files)}")
            
            return organized_count, organization_log
        
        # Run organization
        smart_organize()
        EOF
        
        python organize_files.py
        
    - name: 🔧 Generate Missing Files
      run: |
        echo "🔧 Generating missing required files..."
        
        # Create missing file generator
        cat > generate_missing.py << 'EOF'
        import os
        import json
        from datetime import datetime
        
        def create_extension_json():
            """Create modern extension.json if missing"""
            target = "extensions/HorrorWiki/extension.json"
            if not os.path.exists(target):
                content = """{
            "name": "HorrorWiki",
            "version": "2.0.0",
            "author": ["Horror Wiki Development Team"],
            "url": "https://github.com/user/horror-wiki-complete",
            "description": "Complete horror wiki system with custom skin, content warnings, ratings, and special pages",
            "descriptionmsg": "horrorwiki-desc",
            "license-name": "MIT",
            "type": "other",
            "requires": {
                "MediaWiki": ">= 1.35.0"
            },
            "ValidSkinNames": {
                "horror": {
                    "class": "SkinHorror",
                    "args": [{"name": "horror", "template": "HorrorTemplate"}]
                }
            },
            "MessagesDirs": {
                "HorrorWiki": ["i18n"]
            },
            "AutoloadClasses": {
                "SkinHorror": "includes/SkinHorror.php",
                "HorrorTemplate": "includes/HorrorTemplate.php",
                "HorrorWikiHooks": "includes/HorrorWikiHooks.php",
                "SpecialHorrorDashboard": "includes/specials/SpecialHorrorDashboard.php",
                "SpecialContentWarnings": "includes/specials/SpecialContentWarnings.php",
                "SpecialHorrorRatings": "includes/specials/SpecialHorrorRatings.php"
            },
            "SpecialPages": {
                "HorrorDashboard": "SpecialHorrorDashboard",
                "ContentWarnings": "SpecialContentWarnings",
                "HorrorRatings": "SpecialHorrorRatings"
            },
            "Hooks": {
                "BeforePageDisplay": "HorrorWikiHooks::onBeforePageDisplay",
                "SkinTemplateNavigation::Universal": "HorrorWikiHooks::onSkinTemplateNavigation",
                "ParserFirstCallInit": "HorrorWikiHooks::onParserFirstCallInit",
                "LoadExtensionSchemaUpdates": "HorrorWikiHooks::onLoadExtensionSchemaUpdates"
            },
            "ResourceModules": {
                "skins.horror": {
                    "styles": ["resources/horror-skin.css"],
                    "targets": ["desktop", "mobile"]
                },
                "ext.horrorwiki.features": {
                    "scripts": ["resources/horror-navigation.js", "resources/horror-features.js"],
                    "styles": ["resources/content-warnings.css", "resources/horror-ratings.css"],
                    "dependencies": ["jquery"],
                    "targets": ["desktop", "mobile"]
                }
            },
            "ResourceFileModulePaths": {
                "localBasePath": "",
                "remoteExtPath": "HorrorWiki"
            },
            "config": {
                "HorrorWikiDefaultSkin": {
                    "value": true,
                    "description": "Automatically set horror skin for horror content pages"
                },
                "HorrorWikiEnableWarnings": {
                    "value": true,
                    "description": "Enable content warning system"
                },
                "HorrorWikiEnableRatings": {
                    "value": true,
                    "description": "Enable horror rating system"
                }
            },
            "manifest_version": 2
        }"""
                
                os.makedirs(os.path.dirname(target), exist_ok=True)
                with open(target, 'w') as f:
                    f.write(content)
                print(f"✅ Created: {target}")
        
        def create_legacy_php():
            """Create legacy HorrorWiki.php entry point"""
            target = "extensions/HorrorWiki/HorrorWiki.php"
            if not os.path.exists(target):
                content = """<?php
        /**
         * HorrorWiki Extension - Legacy Entry Point
         * Unified horror wiki system with custom skin and features
         */
        
        if ( function_exists( 'wfLoadExtension' ) ) {
            wfLoadExtension( 'HorrorWiki' );
            return true;
        } else {
            die( 'This version of HorrorWiki requires MediaWiki 1.35+' );
        }
        """
                
                with open(target, 'w') as f:
                    f.write(content)
                print(f"✅ Created: {target}")
        
        def create_i18n_files():
            """Create internationalization files"""
            en_target = "extensions/HorrorWiki/i18n/en.json"
            if not os.path.exists(en_target):
                en_content = """{
            "horrorwiki-desc": "Complete horror wiki system with custom skin and advanced features",
            "skinname-horror": "Horror",
            "horror-dashboard": "Horror Dashboard",
            "content-warnings": "Content Warnings",
            "horror-ratings": "Horror Ratings"
        }"""
                
                os.makedirs(os.path.dirname(en_target), exist_ok=True)
                with open(en_target, 'w') as f:
                    f.write(en_content)
                print(f"✅ Created: {en_target}")
        
        def create_readme():
            """Create comprehensive README"""
            target = "extensions/HorrorWiki/docs/README.md"
            if not os.path.exists(target):
                content = f"""# 🎭 Horror Wiki Extension
        
        A complete horror-themed MediaWiki extension with custom skin and advanced features.
        
        ## Features
        
        - 🎨 **Custom Horror Skin** - Dark, atmospheric design
        - ⚠️ **Content Warnings** - Customizable warning system
        - 💀 **Horror Ratings** - Interactive rating system
        - 🎯 **Special Pages** - Dashboard, ratings, warnings management
        - 📱 **Responsive Design** - Works on all devices
        
        ## Installation
        
        1. Extract to `extensions/HorrorWiki/`
        2. Add `wfLoadExtension( 'HorrorWiki' );` to LocalSettings.php
        3. Run `php maintenance/update.php`
        4. Import SQL files from `sql/` directory
        
        ## Configuration
        
        ```php
        $wgHorrorWikiDefaultSkin = true;       // Auto-apply to horror content
        $wgHorrorWikiEnableWarnings = true;    // Enable warning system
        $wgHorrorWikiEnableRatings = true;     // Enable rating system
        ```
        
        ## Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
                
                os.makedirs(os.path.dirname(target), exist_ok=True)
                with open(target, 'w') as f:
                    f.write(content)
                print(f"✅ Created: {target}")
        
        # Generate all missing files
        create_extension_json()
        create_legacy_php()
        create_i18n_files()
        create_readme()
        
        print("🎉 Missing file generation complete!")
        EOF
        
        python generate_missing.py
        
    - name: 🔒 Set File Permissions
      run: |
        echo "🔒 Setting proper file permissions..."
        
        # Set directory permissions (755 = rwxr-xr-x)
        find extensions/HorrorWiki -type d -exec chmod 755 {} \;
        
        # Set PHP file permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.php" -exec chmod 644 {} \;
        
        # Set CSS file permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.css" -exec chmod 644 {} \;
        
        # Set JavaScript file permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.js" -exec chmod 644 {} \;
        
        # Set JSON file permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.json" -exec chmod 644 {} \;
        
        # Set SQL file permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.sql" -exec chmod 644 {} \;
        
        # Set documentation permissions (644 = rw-r--r--)
        find extensions/HorrorWiki -name "*.md" -exec chmod 644 {} \;
        
        echo "✅ File permissions set successfully!"
        
    - name: 🧪 Validate File Structure
      run: |
        echo "🧪 Validating Horror Wiki file structure..."
        
        # Create validation script
        cat > validate_structure.py << 'EOF'
        import os
        import json
        
        def validate_structure():
            """Validate the organized file structure"""
            required_files = [
                "extensions/HorrorWiki/extension.json",
                "extensions/HorrorWiki/HorrorWiki.php",
                "extensions/HorrorWiki/includes/SkinHorror.php",
                "extensions/HorrorWiki/includes/HorrorTemplate.php",
                "extensions/HorrorWiki/includes/HorrorWikiHooks.php",
                "extensions/HorrorWiki/resources/horror-skin.css",
                "extensions/HorrorWiki/resources/horror-navigation.js",
                "extensions/HorrorWiki/i18n/en.json",
                "extensions/HorrorWiki/docs/README.md"
            ]
            
            optional_files = [
                "extensions/HorrorWiki/includes/specials/SpecialHorrorDashboard.php",
                "extensions/HorrorWiki/includes/specials/SpecialContentWarnings.php",
                "extensions/HorrorWiki/includes/specials/SpecialHorrorRatings.php",
                "extensions/HorrorWiki/resources/content-warnings.css",
                "extensions/HorrorWiki/resources/horror-ratings.css",
                "extensions/HorrorWiki/sql/horror_wiki_database.sql"
            ]
            
            validation_results = {
                "required_files": {"present": [], "missing": []},
                "optional_files": {"present": [], "missing": []},
                "structure_valid": True,
                "total_files": 0
            }
            
            # Check required files
            for file_path in required_files:
                if os.path.exists(file_path):
                    validation_results["required_files"]["present"].append(file_path)
                    print(f"✅ Required file found: {file_path}")
                else:
                    validation_results["required_files"]["missing"].append(file_path)
                    validation_results["structure_valid"] = False
                    print(f"❌ Required file missing: {file_path}")
            
            # Check optional files
            for file_path in optional_files:
                if os.path.exists(file_path):
                    validation_results["optional_files"]["present"].append(file_path)
                    print(f"✅ Optional file found: {file_path}")
                else:
                    validation_results["optional_files"]["missing"].append(file_path)
                    print(f"⚠️  Optional file missing: {file_path}")
            
            # Count total files in extension
            if os.path.exists("extensions/HorrorWiki"):
                for root, dirs, files in os.walk("extensions/HorrorWiki"):
                    validation_results["total_files"] += len(files)
            
            # Validate PHP syntax (basic check)
            php_files = []
            if os.path.exists("extensions/HorrorWiki"):
                for root, dirs, files in os.walk("extensions/HorrorWiki"):
                    for file in files:
                        if file.endswith('.php'):
                            php_files.append(os.path.join(root, file))
            
            print(f"\n📊 Validation Summary:")
            print(f"   Required files present: {len(validation_results['required_files']['present'])}/{len(required_files)}")
            print(f"   Optional files present: {len(validation_results['optional_files']['present'])}/{len(optional_files)}")
            print(f"   Total files organized: {validation_results['total_files']}")
            print(f"   PHP files found: {len(php_files)}")
            print(f"   Structure valid: {'✅ Yes' if validation_results['structure_valid'] else '❌ No'}")
            
            # Save validation results
            with open('.github/outputs/reports/validation_results.json', 'w') as f:
                json.dump(validation_results, f, indent=2)
            
            return validation_results
        
        # Run validation
        results = validate_structure()
        
        # Set GitHub output
        import os
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"structure_valid={str(results['structure_valid']).lower()}\n")
            f.write(f"total_organized_files={results['total_files']}\n")
        EOF
        
        python validate_structure.py
        
    - name: 📊 Generate Organization Report
      run: |
        echo "📊 Generating comprehensive organization report..."
        
        # Create report generator
        cat > generate_report.py << 'EOF'
        import os
        import json
        from datetime import datetime
        
        def generate_comprehensive_report():
            """Generate a detailed organization report"""
            
            # Load all analysis data
            try:
                with open('.github/outputs/reports/repository_analysis.json', 'r') as f:
                    analysis = json.load(f)
            except:
                analysis = {"total_files": 0}
            
            try:
                with open('.github/outputs/reports/organization_log.json', 'r') as f:
                    org_log = json.load(f)
            except:
                org_log = []
            
            try:
                with open('.github/outputs/reports/validation_results.json', 'r') as f:
                    validation = json.load(f)
            except:
                validation = {"structure_valid": False, "total_files": 0}
            
            # Generate report
            report = f"""# 🎭 Horror Wiki Organization Report
        
        **Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
        **Repository:** {os.environ.get('GITHUB_REPOSITORY', 'Unknown')}
        **Workflow:** {os.environ.get('GITHUB_WORKFLOW', 'Unknown')}
        **Run ID:** {os.environ.get('GITHUB_RUN_ID', 'Unknown')}
        
        ## 📈 Organization Summary
        
        | Metric | Value |
        |--------|--------|
        | Original Files Detected | {analysis.get('total_files', 0)} |
        | Files Successfully Organized | {len(org_log)} |
        | Final Extension Files | {validation.get('total_files', 0)} |
        | Structure Valid | {'✅ Yes' if validation.get('structure_valid') else '❌ No'} |
        
        ## 📁 Final Directory Structure
        
        ```
        extensions/HorrorWiki/
        ├── extension.json                    # Modern extension registration
        ├── HorrorWiki.php                   # Legacy entry point
        ├── includes/
        │   ├── SkinHorror.php              # Integrated skin class
        │   ├── HorrorTemplate.php          # Integrated template class
        │   ├── HorrorWikiHooks.php         # Unified hook system
        │   └── specials/
        │       ├── SpecialHorrorDashboard.php
        │       ├── SpecialContentWarnings.php
        │       └── SpecialHorrorRatings.php
        ├── resources/
        │   ├── horror-skin.css             # Main skin styles
        │   ├── content-warnings.css        # Warning system styles
        │   ├── horror-ratings.css          # Rating system styles
        │   ├── horror-navigation.js        # Navigation features
        │   ├── horror-features.js          # Interactive features
        │   └── content-warnings.js         # Warning interactions
        ├── sql/
        │   ├── horror_wiki_database.sql    # Complete database
        │   ├── horror_ratings.sql          # Rating tables
        │   └── content_warnings.sql        # Warning tables
        ├── i18n/
        │   └── en.json                     # English messages
        └── docs/
            ├── README.md                   # Main documentation
            ├── INSTALLATION.md             # Setup guide
            └── API.md                      # Usage guide
        ```
        
        ## 📋 File Organization Details
        
        ### ✅ Successfully Organized Files
        """
            
            # Add organized files details
            for log_entry in org_log:
                report += f"\n- `{log_entry['source']}` → `{log_entry['target']}` ({log_entry['type']})"
            
            report += f"""
        
        ### ✅ Required Files Status
        """
            
            # Add validation details
            for file_path in validation.get('required_files', {}).get('present', []):
                report += f"\n- ✅ `{file_path}`"
            
            for file_path in validation.get('required_files', {}).get('missing', []):
                report += f"\n- ❌ `{file_path}` (MISSING)"
            
            report += f"""
        
        ### ⚠️ Optional Files Status
        """
            
            for file_path in validation.get('optional_files', {}).get('present', []):
                report += f"\n- ✅ `{file_path}`"
            
            for file_path in validation.get('optional_files', {}).get('missing', []):
                report += f"\n- ⚠️ `{file_path}` (optional)"
            
            report += f"""
        
        ## 🚀 Next Steps
        
        1. **Download the organized extension** from the artifacts
        2. **Extract to your MediaWiki installation:**
           ```bash
           unzip horror-wiki-organized.zip
           cp -r extensions/HorrorWiki /path/to/your/mediawiki/extensions/
           ```
        3. **Add to LocalSettings.php:**
           ```php
           wfLoadExtension( 'HorrorWiki' );
           ```
        4. **Import database:**
           ```bash
           mysql -u username -p database_name < extensions/HorrorWiki/sql/horror_wiki_database.sql
           ```
        5. **Run database updates:**
           ```bash
           php maintenance/update.php
           ```
        6. **Test your horror wiki:**
           - Visit `/wiki/Special:HorrorDashboard`
           - Check skin switching to 'Horror'
           - Test content warnings and ratings
        
        ## 🎭 Horror Wiki Features
        
        - 🎨 **Custom Horror Skin** - Dark, atmospheric design
        - ⚠️ **Content Warnings** - Customizable warning system  
        - 💀 **Horror Ratings** - Interactive skull rating system
        - 🎯 **Special Pages** - Dashboard, ratings, warnings management
        - 📱 **Responsive Design** - Works perfectly on all devices
        - 🔍 **SEO Optimized** - Rich snippets and social sharing
        - 🧠 **Smart Detection** - Auto-applies to horror content
        
        ---
        
        **🎉 Your horror wiki is ready to terrify and delight users!** 👹
        """
            
            # Save report
            os.makedirs('.github/outputs/reports', exist_ok=True)
            with open('.github/outputs/reports/ORGANIZATION_REPORT.md', 'w') as f:
                f.write(report)
            
            print("📄 Organization report generated successfully!")
            return report
        
        # Generate report
        generate_comprehensive_report()
        EOF
        
        python generate_report.py
        
    - name: 📦 Create Deployment Package
      if: ${{ github.event.inputs.create_release != 'false' }}
      run: |
        echo "📦 Creating deployment package..."
        
        # Create deployment directory
        mkdir -p .github/outputs/deployment
        
        # Create deployment package
        cd extensions
        tar -czf ../.github/outputs/deployment/horror-wiki-organized.tar.gz HorrorWiki/
        zip -r ../.github/outputs/deployment/horror-wiki-organized.zip HorrorWiki/
        cd ..
        
        # Create installation script
        cat > .github/outputs/deployment/install-horror-wiki.sh << 'EOF'
        #!/bin/bash
        
        echo "🎭 Horror Wiki Installation Script"
        echo "=================================="
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color
        
        # Check if MediaWiki exists
        if [ ! -f "LocalSettings.php" ]; then
            echo -e "${RED}❌ Error: LocalSettings.php not found.${NC}"
            echo "Please run this script in your MediaWiki root directory."
            exit 1
        fi
        
        echo -e "${YELLOW}📦 Extracting Horror Wiki files...${NC}"
        
        # Extract files based on what's available
        if [ -f "horror-wiki-organized.tar.gz" ]; then
            tar -xzf horror-wiki-organized.tar.gz
        elif [ -f "horror-wiki-organized.zip" ]; then
            unzip -o horror-wiki-organized.zip
        else
            echo -e "${RED}❌ Error: No Horror Wiki package found.${NC}"
            echo "Please ensure horror-wiki-organized.tar.gz or horror-wiki-organized.zip is in this directory."
            exit 1
        fi
        
        echo -e "${YELLOW}🔒 Setting file permissions...${NC}"
        chmod -R 755 extensions/HorrorWiki/
        find extensions/HorrorWiki -name "*.php" -exec chmod 644 {} \;
        find extensions/HorrorWiki -name "*.css" -exec chmod 644 {} \;
        find extensions/HorrorWiki -name "*.js" -exec chmod 644 {} \;
        find extensions/HorrorWiki -name "*.json" -exec chmod 644 {} \;
        
        echo -e "${YELLOW}📝 Checking LocalSettings.php...${NC}"
        if grep -q "HorrorWiki" LocalSettings.php; then
            echo -e "${GREEN}✅ HorrorWiki already enabled in LocalSettings.php${NC}"
        else
            echo -e "${YELLOW}📝 Adding HorrorWiki to LocalSettings.php...${NC}"
            echo "" >> LocalSettings.php
            echo "# Horror Wiki Extension" >> LocalSettings.php
            echo "wfLoadExtension( 'HorrorWiki' );" >> LocalSettings.php
            echo "" >> LocalSettings.php
            echo "# Horror Wiki Configuration (optional)" >> LocalSettings.php
            echo "# \$wgHorrorWikiDefaultSkin = true;" >> LocalSettings.php
            echo "# \$wgHorrorWikiEnableWarnings = true;" >> LocalSettings.php
            echo "# \$wgHorrorWikiEnableRatings = true;" >> LocalSettings.php
        fi
        
        echo -e "${GREEN}🎉 Installation complete!${NC}"
        echo ""
        echo -e "${YELLOW}Next steps:${NC}"
        echo "1. Import SQL files from extensions/HorrorWiki/sql/ to your database"
        echo "2. Run: php maintenance/update.php"
        echo "3. Visit /wiki/Special:HorrorDashboard to test"
        echo ""
        echo -e "${GREEN}🎭 Your horror wiki is ready to terrify users!${NC}"
        EOF
        
        chmod +x .github/outputs/deployment/install-horror-wiki.sh
        
        # Create database import script
        cat > .github/outputs/deployment/import-database.sh << 'EOF'
        #!/bin/bash
        
        echo "🗄️ Horror Wiki Database Import Script"
        echo "====================================="
        
        # Check if SQL files exist
        if [ ! -d "extensions/HorrorWiki/sql" ]; then
            echo "❌ Error: SQL directory not found."
            echo "Please ensure Horror Wiki is properly installed."
            exit 1
        fi
        
        # Get database credentials
        echo "Please enter your database details:"
        read -p "Database name: " DB_NAME
        read -p "Database user: " DB_USER
        read -s -p "Database password: " DB_PASS
        echo ""
        
        # Import main database file if it exists
        if [ -f "extensions/HorrorWiki/sql/horror_wiki_database.sql" ]; then
            echo "📥 Importing main database..."
            mysql -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < extensions/HorrorWiki/sql/horror_wiki_database.sql
            echo "✅ Main database imported"
        fi
        
        # Import individual table files
        for sql_file in extensions/HorrorWiki/sql/*.sql; do
            if [ -f "$sql_file" ] && [ "$sql_file" != "extensions/HorrorWiki/sql/horror_wiki_database.sql" ]; then
                echo "📥 Importing $(basename "$sql_file")..."
                mysql -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < "$sql_file"
            fi
        done
        
        echo "🎉 Database import complete!"
        echo "Now run: php maintenance/update.php"
        EOF
        
        chmod +x .github/outputs/deployment/import-database.sh
        
        echo "✅ Deployment package created successfully!"
        
    - name: 📤 Upload Organized Files as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: horror-wiki-organized-extension
        path: |
          extensions/HorrorWiki/
          .github/outputs/deployment/
          .github/outputs/reports/
        retention-days: 30
        
    - name: 📋 Display Final Summary
      run: |
        echo ""
        echo "🎉 ========================================"
        echo "🎭 HORROR WIKI ORGANIZATION COMPLETE!"
        echo "========================================"
        echo ""
        echo "📁 Files have been organized into:"
        echo "   extensions/HorrorWiki/"
        echo ""
        echo "📊 Summary:"
        echo "   - Original files detected: ${{ steps.analyze.outputs.total_files }}"
        echo "   - Skin files found: ${{ steps.analyze.outputs.skin_files }}"
        echo "   - Extension files found: ${{ steps.analyze.outputs.extension_files }}"
        echo "   - Final structure valid: ${{ steps.validate.outputs.structure_valid }}"
        echo ""
        echo "📦 Deployment packages created:"
        echo "   - horror-wiki-organized.zip"
        echo "   - horror-wiki-organized.tar.gz"
        echo "   - install-horror-wiki.sh"
        echo "   - import-database.sh"
        echo ""
        echo "📊 Reports generated:"
        echo "   - ORGANIZATION_REPORT.md"
        echo "   - repository_analysis.json"
        echo "   - validation_results.json"
        echo ""
        echo "🚀 Ready to deploy your horror wiki!"
        echo "========================================"
        
        # Show final directory structure
        echo ""
        echo "📂 Final Directory Structure:"
        if [ -d "extensions/HorrorWiki" ]; then
            tree extensions/HorrorWiki/ 2>/dev/null || find extensions/HorrorWiki/ -type f | sort
        fi
        echo ""
        
        # Show file mapping results
        if [ -f ".github/outputs/reports/organization_log.json" ]; then
            echo "📋 File Organization Summary:"
            python3 -c "
        import json
        try:
            with open('.github/outputs/reports/organization_log.json', 'r') as f:
                log = json.load(f)
            print(f'   Files successfully organized: {len(log)}')
            for entry in log[:10]:  # Show first 10
                print(f'   ✅ {entry[\"source\"]} → {entry[\"target\"]}')
            if len(log) > 10:
                print(f'   ... and {len(log) - 10} more files')
        except:
            print('   Organization log not available')
            "
        fi
